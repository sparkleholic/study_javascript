/**
* Contains the declaration for the {@link module:enyo-webos/MockRequest~MockRequest} kind.
* @module enyo-webos/MockRequest
*/

var
	kind = require('enyo/kind');

var
	Ajax = require('enyo/Ajax'),
	Xhr = require('enyo/xhr');

/**
* An mock version of {@link module:enyo-webos/ServiceRequest~ServiceRequest}
* designed for webOS service request simulation.
*
* It will read mock results from a JSON file and return the results in a manner
* similar to real service requests.
*
* For example, a call to service `palm://com.palm.systemservice/time` with method
* `getSystemTime` will automatically try to read the file
* `mock/com.palm.systemservice/time/getSystemTime.json`. Alternatively, the
* [mockFile]{@link module:enyo-webos/MockRequest~MockRequest#mockFile} property
* may be used to specify a specific JSON file to be read.
*
* @class MockRequest
* @extends module:enyo/Ajax~Ajax
* @public
*/
module.exports = kind(
	/** @lends module:enyo-webos/MockRequest~MockRequest.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.MockRequest',

	/**
	* @private
	*/
	kind: Ajax,

	/**
	* @private
	*/
	mimeType: 'application/json',

	/**
	* @lends module:enyo-webos/MockRequest~MockRequest.prototype
	* @private
	*/
	published: {
		/**
		* The Palm service URI.  Starts with `palm://` and will be used to create
		* the autogenerated mock filepath directory.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		service: '',

		/**
		* The service method to be called.  It will be used to create the
		* autogenerated mock filename (with '.json' appended)
		*
		* @type {String}
		* @default ''
		* @public
		*/
		method: '',

		/**
		* Optionally specifies a JSON file to read for mock results, rather than the
		* specified service and method.
		*
		* @type {String}
		* @default `undefined`
		* @public
		*/
		mockFile: undefined
	},

	/**
	* @public
	*/
	go: function() {
		if(this.mockFile) {
			this.url = this.mockFile;
		} else {
			this.url = this.service;
			var i = this.url.indexOf('://');
			if(i>-1) {
				this.url = this.url.substring(i+3);
			}
			this.url = 'mock/' + this.url;
			if(this.method && this.method.length>0) {
				if(this.url.charAt(this.url.length-1) != '/') {
					this.url += '/';
				}
				this.url += this.method;
			}
			this.url += '.json';
		}
		var serviceMethod = this.method;
		this.method = 'GET';
		var request = this.inherited(arguments);
		this.method = serviceMethod;
		return request;
	},

	/**
	* @public
	*/
	cancel: function() {
		if(this.xhr) {
			Xhr.cancel(this.xhr);
			this.endTimer();
			this.xhr = null;
		}
	},

	/**
	* @private
	*/
	respond: function(value) {
		if(value.errorCode || value.returnValue === false) {
			this.fail(value);
		} else {
			this.inherited(arguments);
		}
	}
});